@using System.Globalization;
@using Models;
@using Microsoft.JSInterop;
@using LibrairieDeComposants.Calendrier.Services;
@using System.Net.Http;
@using DAL;


@inject IJSRuntime JSRuntime
@inject CalendrierStateManager EtatCalendrier
@inject CalendrierContext calendrierContext
@*@inject HttpClient HttpClient*@
@*@inject Blazored.LocalStorage.ILocalStorageService _localStore*@

<div class="container">

    <div class="row justify-content-md-center">
        <div class="col-sm text-sm-right">
            <button class="btn btn-secondary" type="button" @onclick="ReculeUnMois"><span class="material-icons">fast_rewind</span></button>
        </div>
        <div class="col-sm">
            <div class="form-group">
                <select id="mois" class="form-control" @bind="EtatCalendrier.MoisSelectione">
                    @foreach (var m in mois)
                    {
                        if (m.Key == EtatCalendrier.MoisSelectione)
                        {
                            <option value="@(m.Key)" selected>@(m.Value)</option>
                        }
                        else
                        {
                            <option value="@(m.Key)">@(m.Value)</option>
                        }
                    }
                </select>
            </div>
        </div>
        <div class="col-sm">
            <button class="btn btn-secondary" type="button" @onclick="AvanceUnMois"><span class="material-icons">fast_forward</span></button>
        </div>
    </div>

    @foreach (var semaine in EtatCalendrier.Calendrier.Semaines)
    {
        <Semaine semaine="semaine" OnAfficheModalNote="OnAfficheModalNote"></Semaine>
    }


    <div class="modal" id="myModal">
        <div class="modal-dialog">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Ajouter une note le @EtatCalendrier.JourSelectionne.Jour.ToString(EtatCalendrier.DateFormat, EtatCalendrier.Culture)</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <div class="form-group">
                        <label for="exampleFormControlTextarea1"> <span class="material-icons">edit</span> Note :</label>
                        <textarea class="form-control" id="exampleFormControlTextarea1" rows="3" @bind="note"></textarea>
                    </div>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn" data-dismiss="modal">Annuler</button>
                    <button type="button" class="btn btn-dark" @onclick="AjouterNote">Ajouter : <span class="material-icons">done_outline</span></button>
                </div>

            </div>
        </div>
    </div>

</div>



@code {
    [Parameter] public String FormatDate { get; set; }
    [Parameter] public String NomCulture { get; set; }


    private IEnumerable<KeyValuePair<int, string>> mois;
    private string note;



    protected override async Task OnParametersSetAsync()
    {
        EtatCalendrier.UseCulture(NomCulture);
        EtatCalendrier.UseDateFormat(FormatDate);
        EtatCalendrier.MoisSelectione = DateTime.Now.Month;

        var dateFormatInfo = EtatCalendrier.Culture.DateTimeFormat;
        mois = Enumerable.Range(1, 12).Select(i => new KeyValuePair<int, string>(i, dateFormatInfo.GetMonthName(i)));

        await base.OnParametersSetAsync();
    }

    private void ReculeUnMois()
    {
        EtatCalendrier.MoisSelectione--;
        ChargerNotes();
    }

    private void AvanceUnMois()
    {
        EtatCalendrier.MoisSelectione++;
        ChargerNotes();
    }

    void OnAfficheModalNote(JourModels jour)
    {
        EtatCalendrier.JourSelectionne = jour;
        JSRuntime.InvokeVoidAsync("ouvrirModal");
    }

    void AjouterNote()
    {
        EtatCalendrier.JourSelectionne.AjouterNote(note);
        JSRuntime.InvokeVoidAsync("fermerModal");
        note = String.Empty;
    }


    private String _apiPath = "api/Notes";

    public void EnregistrerNote()
    {
        //IEnregistrerNote localStore = new WebServiceStorage(HttpClient, _apiPath);
        //localStore.EnregistrerNote(EtatCalendrier.JourSelectionne);
    }

    public void ChargerNotes()
    {
        //IEnregistrerNote localStore = new WebServiceStorage(HttpClient, _apiPath);

        DateTime datedebut = (EtatCalendrier.Calendrier.Semaines.ElementAt(0)?.Jours.ElementAt(0)?.Jour).Value;
        DateTime dateFin = (EtatCalendrier.Calendrier.Semaines.FindLast(x => true)?.Jours.FindLast(x => true).Jour).Value;

        if (datedebut == DateTime.MinValue || dateFin == DateTime.MinValue)
        {
            return;
        }

        //List<NotePersistanceModel> NotesBrutes = localStore.ChargerNotes(datedebut, dateFin);

        List<Note> notes = calendrierContext.Notes.Where(x => true).ToList();

        List<NoteViewModel> NotesBrutes = new List<NoteViewModel>();
        foreach (var item in notes)
        {
            NotesBrutes.Add(new NoteViewModel() { Date = item.Date, Note = item.Message });
        }

        foreach (NoteViewModel NoteBrute in NotesBrutes)
        {
            foreach (var semaine in EtatCalendrier.Calendrier.Semaines)
            {
                JourModels jour = semaine.Jours.Find(j => j.Jour.Year == NoteBrute.Date.Year
                                                        && j.Jour.Month == NoteBrute.Date.Month
                                                        &&j.Jour.Day == NoteBrute.Date.Day);

                if (jour != null)
                {
                    jour.Notes.Add(NoteBrute.Note);
                }
            }
        }

    }
}
