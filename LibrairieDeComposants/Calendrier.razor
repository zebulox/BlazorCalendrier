@using Microsoft.JSInterop;
@using Data.Dal
@using Data.Models

@inject IJSRuntime JSRuntime
@inject CalendrierStateManager EtatCalendrier
@inject CalendrierContext calendrierContext
@*@inject HttpClient HttpClient*@
@*@inject Blazored.LocalStorage.ILocalStorageService _localStore*@

<div class="container">

    <div class="row justify-content-md-center">
        <div class="col-sm text-sm-right">
            <button class="btn btn-secondary" type="button" @onclick="ReculeUnMois"><span class="material-icons">fast_rewind</span></button>
        </div>
        <div class="col-sm">
            <div class="form-group">
                <select id="mois" class="form-control" @bind="EtatCalendrier.MoisSelectione">
                    @foreach (var m in mois)
                    {
                        if (m.Key == EtatCalendrier.MoisSelectione)
                        {
                            <option value="@(m.Key)" selected>@(m.Value)</option>
                        }
                        else
                        {
                            <option value="@(m.Key)">@(m.Value)</option>
                        }
                    }
                </select>
            </div>
        </div>
        <div class="col-sm">
            <button class="btn btn-secondary" type="button" @onclick="AvanceUnMois"><span class="material-icons">fast_forward</span></button>
        </div>
    </div>

    @foreach (var semaine in EtatCalendrier.Calendrier.Semaines)
    {
        <Semaine semaine="semaine" OnAfficheModalNote="OnAfficheModalNote"></Semaine>
    }


    <div class="modal" id="myModal">
        <div class="modal-dialog">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Ajouter une note le @EtatCalendrier.JourSelectionne.Jour.ToString(EtatCalendrier.DateFormat, EtatCalendrier.Culture)</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <div id="accordion">
                        <div class="card">
                            <div class="card-header" id="headingOne">
                                <h5 class="mb-0">
                                    <button class="btn btn-link" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                        Ecrire une note pour :
                                    </button>
                                    <select @bind="EtatCalendrier.NoteVm.GroupeID">
                                        @if (EtatCalendrier.CurrentUser.UtilisateurGroupe != null)
                                        {
                                            @foreach (UtilisateurGroupe Ugroupe in EtatCalendrier.CurrentUser.UtilisateurGroupe)
                                            {
                                                <option value="@Ugroupe.Groupe.GroupeID">@Ugroupe.Groupe.Nom</option>
                                            }
                                        }
}
                                    </select>
                                </h5>
                            </div>

                            <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordion">
                                <div class="card-body">
                                    <div class="form-group">
                                        <label for="exampleFormControlTextarea1"> <span class="material-icons">edit</span> Note :</label>
                                        <textarea class="form-control" id="exampleFormControlTextarea1" rows="3" @bind="EtatCalendrier.NoteVm.Note"></textarea>
                                    </div>
                                    @if (EtatCalendrier.CurrentUser != null)
                                    {
                                        <button type="button" class="btn btn-primary float-right mb-5" @onclick="AjouterNote"><span class="material-icons">note_add</span></button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-dark float-right mb-5" data-toggle="tooltip" data-placement="top" title="Vous devez vous connecter avant de créer une note" disabled>Ajouter : <span class="material-icons">note_add</span></button>
                                    }
                                </div>


                            </div>
                        </div>
                        <div class="card">
                            <div class="card-header" id="headingTwo">
                                <h5 class="mb-0">
                                    <button class="btn btn-link collapsed" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                                        Voir les notes
                                    </button>
                                </h5>
                            </div>
                            <div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#accordion">
                                <div class="card-body">

                                        <div class="card-columns">
                                            @foreach (var note in EtatCalendrier.JourSelectionne.Notes)
                                            {

                                            <div class="card" style="width: 100%;">
                                                <div class="card-header">
                                                    <h5 class="card-title text-autosize">
                                                        <img src="@(note.CreateurAvatar)" alt="Card image cap"> <b> : </b> <b class="auteur-pseudo">@(note.CreateurNom)</b>
                                                    </h5>
                                                </div>
                                                <div class="card-body">
                                                    @if (note.Note.Contains("CROISSANT"))
                                                    {
                                                        List<String> splittedNote = note.Note.Split(new String[] { "CROISSANT" }, StringSplitOptions.None).ToList();
                                                        splittedNote.RemoveAt(splittedNote.Count - 1);

                                                        foreach (String fragment in splittedNote)
                                                        {
                                                            <p class="card-text">@(fragment)</p>
                                                            <img src="/Images/Icons/various/croissant.svg" style="width: 100%;">
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <p class="card-text">@(note.Note)</p>
                                                    }
                                                    <a>@(note.DateCreationNote.ToString(EtatCalendrier.ShortdateFormat, EtatCalendrier.Culture))</a>
                                                </div>

                                                <div class="card-footer">
                                                    @if (EtatCalendrier.CurrentUser.Login == note.CreateurNom)
                                                    {
                                                        <button type="button" class="btn btn-sm btn-danger float-right mb-2" @onclick="@(e => EffacerNote(note))">
                                                            <span class="material-icons">delete</span>
                                                        </button>
                                                    }
                                                </div>
                                            </div>
                                            }
                                        </div>

                                </div>
                            </div>
                        </div>
                    </div>

                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn" data-dismiss="modal">Fermer</button>
                </div>

            </div>
        </div>
    </div>

</div>



@code {

    private IEnumerable<KeyValuePair<int, string>> mois;



    protected override async Task OnParametersSetAsync()
    {
        EtatCalendrier.InitDataAccess(calendrierContext);
        EtatCalendrier.MoisSelectione = DateTime.Now.Month;

        var dateFormatInfo = EtatCalendrier.Culture.DateTimeFormat;
        mois = Enumerable.Range(1, 12).Select(i => new KeyValuePair<int, string>(i, dateFormatInfo.GetMonthName(i)));
        
        await base.OnParametersSetAsync();
    }

    private void ReculeUnMois()
    {
        EtatCalendrier.MoisSelectione--;
    }

    private void AvanceUnMois()
    {
        EtatCalendrier.MoisSelectione++;
    }

    void OnAfficheModalNote(JourModel jour)
    {
        EtatCalendrier.JourSelectionne = jour;
        JSRuntime.InvokeVoidAsync("ouvrirModal");
    }

    void AjouterNote()
    {
        if (EtatCalendrier.CurrentUser != null)
        {
            JSRuntime.InvokeVoidAsync("fermerModal");

            EtatCalendrier.NoteVm.Date = EtatCalendrier.JourSelectionne.Jour;
            EtatCalendrier.NoteVm.CreateurNom = EtatCalendrier.CurrentUser.Login;
            EtatCalendrier.NoteVm.CreateurAvatar = EtatCalendrier.CurrentUser.ProfilImage;
            EtatCalendrier.NoteVm.DateCreationNote = DateTime.Now;
            //mise à jour de l'interface
            EtatCalendrier.JourSelectionne.AjouterNote(EtatCalendrier.NoteVm);
            //mise à jour du store
            EtatCalendrier.EnregistrerNote(EtatCalendrier.NoteVm);

            //on créer une nouvelle note vierge
            EtatCalendrier.NoteVm = new NoteViewModel();
            EtatCalendrier.DefinirGroupeParDefault();

        }
    }

    void EffacerNote(NoteViewModel noteVm)
    {
        EtatCalendrier.EffacerNote(noteVm);
    }

}